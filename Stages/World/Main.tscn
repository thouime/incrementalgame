[gd_scene load_steps=41 format=3 uid="uid://bb20s8yg8iuot"]

[ext_resource type="Script" uid="uid://dhi8m1bkdqts0" path="res://Stages/World/main_world.gd" id="1_my0f1"]
[ext_resource type="Script" uid="uid://cbvcv16b77aju" path="res://Stages/World/grid.gd" id="2_jms7j"]
[ext_resource type="Texture2D" uid="uid://525imn4ikpss" path="res://Common/Assets/Art/objects/objects.png" id="3_bq8qm"]
[ext_resource type="PackedScene" uid="uid://dn215u4niu0ji" path="res://Entities/Player/player.tscn" id="4_tu2if"]
[ext_resource type="Script" uid="uid://c6j4a7u5i68m6" path="res://Utilities/Inventory/inventory_data.gd" id="5_5wslp"]
[ext_resource type="Script" uid="uid://c433uyphag8so" path="res://Utilities/Inventory/slot_data.gd" id="6_ir37h"]
[ext_resource type="Resource" uid="uid://c47yrnik4v8vy" path="res://Entities/Item/Items/basic/leaf_item.tres" id="7_6wypw"]
[ext_resource type="Resource" uid="uid://c8ia8q7d2wx6o" path="res://Entities/Item/Items/basic/stick_item.tres" id="8_p57k8"]
[ext_resource type="Script" uid="uid://chy7n8ekhbc3r" path="res://Utilities/Inventory/inventory_data_equip.gd" id="8_qgjrh"]
[ext_resource type="Resource" uid="uid://bhvnyyfbu2grs" path="res://Entities/Item/Items/basic/stone_item.tres" id="9_1yk6w"]
[ext_resource type="Script" uid="uid://b6l44fya1rgi3" path="res://Entities/Item/item_data_equip.gd" id="9_xngxq"]
[ext_resource type="PackedScene" uid="uid://dptrl8y01po4m" path="res://Stages/World/world.tscn" id="10_pj4bu"]
[ext_resource type="Resource" uid="uid://bvd8gpu7r0l5c" path="res://Entities/Item/Items/basic/wood_item.tres" id="10_rdguh"]
[ext_resource type="PackedScene" uid="uid://byoflltw01rq5" path="res://Entities/Objects/bush.tscn" id="11_8t0sd"]
[ext_resource type="PackedScene" uid="uid://bsgr3kae0gnej" path="res://Stages/Dungeons/dungeon_entrance.tscn" id="12_gp1pg"]
[ext_resource type="PackedScene" uid="uid://cftvtb33kjqt7" path="res://Stages/Dungeons/GoblinCave/GoblinCave.tscn" id="13_3pi58"]
[ext_resource type="PackedScene" uid="uid://cvs7h2d6kjk5g" path="res://Entities/Enemy/Goblin/goblin.tscn" id="14_0fsef"]
[ext_resource type="Script" uid="uid://b8q5o1m4wpl8" path="res://Stages/Dungeons/dungeon_resource.gd" id="15_76ta7"]
[ext_resource type="PackedScene" uid="uid://6nrx3gn8vdr3" path="res://Utilities/Menus/hub_menu.tscn" id="16_tyfer"]
[ext_resource type="PackedScene" uid="uid://cegfrcv0cewvw" path="res://Entities/Objects/stone_cluster.tscn" id="17_xunpu"]
[ext_resource type="PackedScene" uid="uid://cednyx6i43tlg" path="res://Entities/Objects/tree.tscn" id="18_jgwei"]
[ext_resource type="Shader" uid="uid://ci7j7ihxngfo5" path="res://Entities/Objects/Shaders/aura.gdshader" id="19_gbypb"]

[sub_resource type="Resource" id="Resource_2luon"]
script = ExtResource("6_ir37h")
item_data = ExtResource("7_6wypw")
quantity = 99

[sub_resource type="Resource" id="Resource_cafxv"]
script = ExtResource("6_ir37h")
item_data = ExtResource("8_p57k8")
quantity = 99

[sub_resource type="Resource" id="Resource_uui4l"]
script = ExtResource("6_ir37h")
item_data = ExtResource("9_1yk6w")
quantity = 99

[sub_resource type="Resource" id="Resource_g1pwx"]
script = ExtResource("6_ir37h")
item_data = ExtResource("10_rdguh")
quantity = 99

[sub_resource type="Resource" id="Resource_66drq"]
script = ExtResource("5_5wslp")
slot_datas = Array[ExtResource("6_ir37h")]([SubResource("Resource_2luon"), SubResource("Resource_cafxv"), SubResource("Resource_uui4l"), SubResource("Resource_g1pwx"), null, null, null, null, null, null])
inventory_size = 15

[sub_resource type="Resource" id="Resource_jsd2a"]
script = ExtResource("9_xngxq")
equipment_type = 0
defense = 0
name = ""
description = ""
_stackable = false

[sub_resource type="Resource" id="Resource_jjkp5"]
script = ExtResource("6_ir37h")
item_data = SubResource("Resource_jsd2a")
quantity = 1

[sub_resource type="Resource" id="Resource_0msbn"]
script = ExtResource("8_qgjrh")
slot_datas = Array[ExtResource("6_ir37h")]([SubResource("Resource_jjkp5"), null, null, null, null, null, null])
inventory_size = 7

[sub_resource type="Shader" id="Shader_htk2q"]
code = "shader_type canvas_item;

uniform vec4 color : source_color = vec4(1.0);
uniform float width : hint_range(0, 10) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = true;
uniform bool add_margins = true; // only useful when inside is false
uniform vec2 number_of_images = vec2(1.0); // number of horizontal and vertical images in the sprite sheet
uniform int focus = 0; // 0 for false, 1 for true

void vertex() {
    if (add_margins) {
        VERTEX += sign(VERTEX) * width; // replace sign(VERTEX) by (sign(VERTEX) * 2.0 - 1.0) if not Centered
    }
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, vec2 image_top_left, vec2 image_bottom_right, sampler2D texture) {
    for (float i = -ceil(width); i <= ceil(width); i++) {
        float x = abs(i) > width ? width * sign(i) : i;
        float offset;

        if (pattern == 0) {
            offset = width - abs(x);
        } else if (pattern == 1) {
            offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
        } else if (pattern == 2) {
            offset = width;
        }

        for (float j = -ceil(offset); j <= ceil(offset); j++) {
            float y = abs(j) > offset ? offset * sign(j) : j;
            vec2 xy = uv + texture_pixel_size * vec2(x, y);

            if ((xy != clamp(xy, image_top_left, image_bottom_right) || texture(texture, xy).a <= 0.0) == inside) {
                return true;
            }
        }
    }

    return false;
}

void fragment() {
	COLOR = vec4(0.0, 1.0, 0.0, 1.0); // green debug
    vec2 uv = UV;
    vec2 image_top_left = floor(uv * number_of_images) / number_of_images;
    vec2 image_bottom_right = image_top_left + vec2(1.0) / number_of_images;

    if (add_margins) {
        vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0) * number_of_images);

        // Calculate the UV coordinates while adding margins
        uv = (uv - texture_pixel_size * width - image_top_left) * TEXTURE_PIXEL_SIZE / texture_pixel_size + image_top_left;

        // Clamp UV to ensure we don't sample outside the intended area
        uv = clamp(uv, image_top_left, image_bottom_right);

        // Only sample if the UV is within the bounds
        if (uv == image_top_left || uv == image_bottom_right) {
            COLOR.a = 0.0; // Make it fully transparent if clamped to edges
        } else {
            COLOR = texture(TEXTURE, uv);
        }
    } else {
        COLOR = texture(TEXTURE, uv);
    }

	// Use shader if the object is being focused
	if (focus == 1) {

	    if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, image_top_left, image_bottom_right, TEXTURE)) {
	        COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
	        COLOR.a += (1.0 - COLOR.a) * color.a;
	    }
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_5k06o"]
resource_local_to_scene = true
shader = SubResource("Shader_htk2q")
shader_parameter/color = Color(0.864358, 0.915483, 0.923664, 1)
shader_parameter/width = 0.8
shader_parameter/pattern = 0
shader_parameter/inside = true
shader_parameter/add_margins = true
shader_parameter/number_of_images = Vector2(1, 1)
shader_parameter/focus = 0

[sub_resource type="Shader" id="Shader_s2hej"]
code = "shader_type canvas_item;

uniform vec4 color : source_color = vec4(1.0);
uniform float width : hint_range(0, 10) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = true;
uniform bool add_margins = true; // only useful when inside is false
uniform vec2 number_of_images = vec2(1.0); // number of horizontal and vertical images in the sprite sheet
uniform int focus = 0; // 0 for false, 1 for true

void vertex() {
    if (add_margins) {
        VERTEX += sign(VERTEX) * width; // replace sign(VERTEX) by (sign(VERTEX) * 2.0 - 1.0) if not Centered
    }
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, vec2 image_top_left, vec2 image_bottom_right, sampler2D texture) {
    for (float i = -ceil(width); i <= ceil(width); i++) {
        float x = abs(i) > width ? width * sign(i) : i;
        float offset;

        if (pattern == 0) {
            offset = width - abs(x);
        } else if (pattern == 1) {
            offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
        } else if (pattern == 2) {
            offset = width;
        }

        for (float j = -ceil(offset); j <= ceil(offset); j++) {
            float y = abs(j) > offset ? offset * sign(j) : j;
            vec2 xy = uv + texture_pixel_size * vec2(x, y);

            if ((xy != clamp(xy, image_top_left, image_bottom_right) || texture(texture, xy).a <= 0.0) == inside) {
                return true;
            }
        }
    }

    return false;
}

void fragment() {
	COLOR = vec4(0.0, 1.0, 0.0, 1.0); // green debug
    vec2 uv = UV;
    vec2 image_top_left = floor(uv * number_of_images) / number_of_images;
    vec2 image_bottom_right = image_top_left + vec2(1.0) / number_of_images;

    if (add_margins) {
        vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0) * number_of_images);

        // Calculate the UV coordinates while adding margins
        uv = (uv - texture_pixel_size * width - image_top_left) * TEXTURE_PIXEL_SIZE / texture_pixel_size + image_top_left;

        // Clamp UV to ensure we don't sample outside the intended area
        uv = clamp(uv, image_top_left, image_bottom_right);

        // Only sample if the UV is within the bounds
        if (uv == image_top_left || uv == image_bottom_right) {
            COLOR.a = 0.0; // Make it fully transparent if clamped to edges
        } else {
            COLOR = texture(TEXTURE, uv);
        }
    } else {
        COLOR = texture(TEXTURE, uv);
    }

	// Use shader if the object is being focused
	if (focus == 1) {
		
	    if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, image_top_left, image_bottom_right, TEXTURE)) {
	        COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
	        COLOR.a += (1.0 - COLOR.a) * color.a;
	    }
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_jkhk1"]
resource_local_to_scene = true
shader = SubResource("Shader_s2hej")
shader_parameter/color = Color(0.864358, 0.915483, 0.923664, 1)
shader_parameter/width = 0.8
shader_parameter/pattern = 0
shader_parameter/inside = true
shader_parameter/add_margins = true
shader_parameter/number_of_images = Vector2(1, 1)
shader_parameter/focus = 0

[sub_resource type="Resource" id="Resource_y1gps"]
script = ExtResource("15_76ta7")
name = "Goblin Cave"
dungeon_scene = ExtResource("13_3pi58")
enemy_count = 0
difficulty = 1
estimated_completion = 0
loot_table = Array[String]([])
completions = 0
enemy_types = Array[PackedScene]([ExtResource("14_0fsef")])

[sub_resource type="ShaderMaterial" id="ShaderMaterial_pfw2x"]
resource_local_to_scene = true
shader = SubResource("Shader_s2hej")
shader_parameter/color = Color(0.864358, 0.915483, 0.923664, 1)
shader_parameter/width = 0.8
shader_parameter/pattern = 0
shader_parameter/inside = true
shader_parameter/add_margins = true
shader_parameter/number_of_images = Vector2(1, 1)
shader_parameter/focus = 0

[sub_resource type="Shader" id="Shader_v10ab"]
code = "shader_type canvas_item;

uniform vec4 color : source_color = vec4(1.0);
uniform float width : hint_range(0, 10) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = true;
uniform bool add_margins = true; // only useful when inside is false
uniform vec2 number_of_images = vec2(1.0); // number of horizontal and vertical images in the sprite sheet
uniform int focus = 0; // 0 for false, 1 for true

void vertex() {
    if (add_margins) {
        VERTEX += sign(VERTEX) * width; // replace sign(VERTEX) by (sign(VERTEX) * 2.0 - 1.0) if not Centered
    }
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, vec2 image_top_left, vec2 image_bottom_right, sampler2D texture) {
    for (float i = -ceil(width); i <= ceil(width); i++) {
        float x = abs(i) > width ? width * sign(i) : i;
        float offset;

        if (pattern == 0) {
            offset = width - abs(x);
        } else if (pattern == 1) {
            offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
        } else if (pattern == 2) {
            offset = width;
        }

        for (float j = -ceil(offset); j <= ceil(offset); j++) {
            float y = abs(j) > offset ? offset * sign(j) : j;
            vec2 xy = uv + texture_pixel_size * vec2(x, y);

            if ((xy != clamp(xy, image_top_left, image_bottom_right) || texture(texture, xy).a <= 0.0) == inside) {
                return true;
            }
        }
    }

    return false;
}

void fragment() {
	//COLOR = vec4(UV, 0.0, 1.0); // visualize UV
    vec2 uv = UV;
    vec2 image_top_left = floor(uv * number_of_images) / number_of_images;
    vec2 image_bottom_right = image_top_left + vec2(1.0) / number_of_images;

	// Use shader if the object is being focused
	if (focus == 1) {
	    if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, image_top_left, image_bottom_right, TEXTURE)) {
	        COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
	        COLOR.a += (1.0 - COLOR.a) * color.a;
	    }
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_clgik"]
resource_local_to_scene = true
shader = SubResource("Shader_v10ab")
shader_parameter/color = Color(1, 1, 1, 1)
shader_parameter/width = 0.8
shader_parameter/pattern = 0
shader_parameter/inside = true
shader_parameter/add_margins = false
shader_parameter/number_of_images = Vector2(1, 1)
shader_parameter/focus = 0

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ncb18"]
resource_local_to_scene = true
shader = SubResource("Shader_v10ab")
shader_parameter/color = Color(1, 1, 1, 1)
shader_parameter/width = 0.8
shader_parameter/pattern = 0
shader_parameter/inside = true
shader_parameter/add_margins = false
shader_parameter/number_of_images = Vector2(1, 1)
shader_parameter/focus = 0

[sub_resource type="ShaderMaterial" id="ShaderMaterial_q2uik"]
resource_local_to_scene = true
shader = ExtResource("19_gbypb")
shader_parameter/color = Color(0.864358, 0.915483, 0.923664, 1)
shader_parameter/width = 0.8
shader_parameter/pattern = 0
shader_parameter/inside = true
shader_parameter/add_margins = false
shader_parameter/number_of_images = Vector2(1, 1)
shader_parameter/focus = 0

[node name="Main" type="Node"]

[node name="MainWorld" type="Node2D" parent="."]
script = ExtResource("1_my0f1")

[node name="Grid" type="Control" parent="MainWorld"]
light_mask = 0
visibility_layer = 512
z_index = 100
layout_mode = 3
anchors_preset = 0
script = ExtResource("2_jms7j")

[node name="Cursor" type="Sprite2D" parent="MainWorld/Grid"]
visible = false
z_index = 1
texture = ExtResource("3_bq8qm")
region_enabled = true
region_rect = Rect2(80, 0, 16, 16)

[node name="Player" parent="MainWorld" instance=ExtResource("4_tu2if")]
z_index = 2
position = Vector2(250, 450)
scale = Vector2(1, 1)
collision_layer = 6
inventory_data = SubResource("Resource_66drq")
equip_inventory_data = SubResource("Resource_0msbn")

[node name="World" parent="MainWorld" instance=ExtResource("10_pj4bu")]
position = Vector2(64, 160)
metadata/_edit_lock_ = true

[node name="Bush" parent="MainWorld" instance=ExtResource("11_8t0sd")]
material = SubResource("ShaderMaterial_5k06o")
position = Vector2(326, 427)
input_pickable = true

[node name="DungeonEntrance" parent="MainWorld" instance=ExtResource("12_gp1pg")]
material = SubResource("ShaderMaterial_jkhk1")
position = Vector2(704, -288)
dungeon_data = SubResource("Resource_y1gps")

[node name="DungeonEntrance2" parent="MainWorld" instance=ExtResource("12_gp1pg")]
material = SubResource("ShaderMaterial_pfw2x")
position = Vector2(704, -288)
dungeon_data = SubResource("Resource_y1gps")

[node name="UI" type="CanvasLayer" parent="MainWorld"]

[node name="HubMenu" parent="MainWorld/UI" instance=ExtResource("16_tyfer")]
process_mode = 3
metadata/_edit_lock_ = true

[node name="StoneCluster" parent="MainWorld" instance=ExtResource("17_xunpu")]
material = SubResource("ShaderMaterial_clgik")
position = Vector2(193, 457)

[node name="StoneCluster2" parent="MainWorld" instance=ExtResource("17_xunpu")]
material = SubResource("ShaderMaterial_ncb18")
position = Vector2(96, -225)

[node name="Tree" parent="MainWorld" instance=ExtResource("18_jgwei")]
material = SubResource("ShaderMaterial_q2uik")
position = Vector2(265, 257)

[node name="DungeonWorld" type="Node2D" parent="."]
metadata/_edit_lock_ = true
